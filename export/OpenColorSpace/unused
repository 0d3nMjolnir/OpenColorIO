
    /*
    enum CoordinateSpace
    {
        COORDINATE_SPACE_UNKNOWN = 0,
        COORDINATE_SPACE_RGB,
        COORDINATE_SPACE_HSV,
        COORDINATE_SPACE_HSL,
        COORDINATE_SPACE_TML
    };
    */
    
    
    
    Config ...
    
    
        /*
        int getNumColorSpaceFamilies() const;
        const char * getColorSpaceFamily(int index) const;
        
        int getNumColorSpacesInFamily(const char * family) const;
        const ColorSpace& getColorSpaceInFamily(const char * family,
                                                int index) const;
        
        const ColorSpace& parseColorSpace(const char * userString,
            const char * tokensToSplit = "") const;
        */
        
        
        

    #if 0
        
        
        /// DisplayTransform //////////////////////////////////////////////////
        
        /*!
        The Display Transform is the recommended path for preparing pixels for
        display on an output device.
        
        The displayDevice is the name of an output device (or it's colorimetric
        specification), and examples would include 'sRGB Monitor, P3 DLP, etc'.
        Traditionally, device to device variation is not included in this
        label, all devices of a category (such as P3 DLP) are expected to be
        calibrated outside of this process.
        
        The visualization is the idenitfier for a particular set of
        output transforms.  Traditionally, 'Film' denotes the image as it
        will appear in the final output media. (Whether the output is physical
        film or not). The default visualization is traditionally how the artist
        would work.  However, other visualization are often needed.
        
        A visualization such as 'Raw' (which applied NO transformations) is
        often useful for inspecting the underlying image data.
        
        Often a show will be created on devices with a particular gamut that
        is different from the gamut of the final deliverable. In this case
        a visualization showing a gamut clipping-preview is often useful.
        
        Another common occurance is that it will be known ahead of time that
        a film is going to get an overall color treatment (for example, an
        overall 'warming look'.  In this case, it would be convenient to
        define a 'Film Warmlook', allowing the artist to toggle back and forth
        between the null vs. warm settings.
        
        
        Essentially, the displayDevice and visualization options form a matrix
        of output options. The following is an example for how a set of devices
        and visualizations could be configured.
        
                    Visualization
                    Raw                 Film                Film Warm
        Device
        sRGB        (no transform)      3DLUTs "A"     Warming lut->3DLUTs "A"
        P3 DLP      (no transform)      3DLUTs "B"     Warming lut->3DLUTs "B"
        
        Note: This library make NO assumptions as to the names, or roles, of
        visualizations or devices.  The names above are for example purposes
        only.
        
        
        
        The DisplayTransform also takes a variety of additional
        arguments that modify the transform applied to the image, including:
        
        * viewMatrix: Allows inspecting of individual (rgbal, etc) channels.
        * fStopExposure: Allows for modification of the exposure, in stops, in
                         the ROLE_SCENE_LINEAR ColorSpace
        * ASCColorCorrection: Allows for modification of the gain, gamma,
                              offset, saturation in the ROLE_COLOR_TIMING
                              colorspace,in a manner consistent with ASC
                              convention.
        * ShotCC: Allows for an additional layer of CC correction,
                  corresponding with a per-shot correction supplied by a DI
                  facility. Can occur in an abitrary (specified) input and
                  output ColorSpace (need not be symmetrical)
        
        Additional view controls for modifying the post-displayTransform black-
        point, white-point, and gamma are also provided. (These are not intended
        as permenant 'calibration' corrections, but rather as temporary tools
        for data inspection).
        
        Note: in traditional use cases, a'DisplayTransformed' image is NEVER
        written out to disk. Instead, this process is dynamically done at
        run-time, with options corresponding to the specified display.  If you
        are interested in writing out an image corresponding to an output
        device, (such as DCDM XYZ, P3 DLP, rec709, etc) it is vastely preferable
        to create a corresponding ColorSpace and use that processing path.
        */
        
        /*
        int GetNumDisplayDevices();
        const char * GetDisplayDevice(int index, bool useHostName);
        const char * GetDefaultDisplayDevice();
        
        int GetNumDisplayTransformVisualizations(const char * device);
        const char * GetDisplayTransformVisualization(const char * device,
                                                      int index);
        
        const char * GetDefaultDisplayTransformVisualization(const char * device);
        
        // Note: Not all visualizations are supported for all displayDevices.
        //     Thus, if a user changes display devices you must confirm that
        //     the visualization is supported. If it is not, switching to the
        //     device's default visualization is recommended.
        
        bool IsDisplayTransformVisualizationSupported(const char * device,
                                                      const char * visualization);
        
        void ApplyTransform(ImageDesc& img,
                            const DisplayTransform& displayTransform);
        
        // As recomputing the cg displayTransform shader / 3dlut may be
        // potentially expensive, this library will cache the most recently
        // queried entries. You can specify the max entries of luts to cache.
        
        //! Get the size of the recommended 3d lut.
        //  This is the size of one of the edges (such as '32')
        int GetRecommendedDisplayTransformLut3DSize();
        
        void GetHWDisplayTransform(HWDisplayTransform* hwDisplayTransform,
                                   int lut3DSize,
                                   const char* shaderFcnName,
                                   HWLanguage hwLang,
                                   const DisplayTransform &displayTransform);
        */
        
        
        
        
        
        
        // ASC COLOR CORRECTION ///////////////////////////////////////////////
        
        //! Apply the specified color correction to the specified image
        /// Note: this is customarily applied in COLORSPACE_ROLE_COLOR_TIMING
        //        colorspace, though it is the client's responsibility to
        //        handle this conversion if applied manually using the s/w
        //        path.
        /*
        void ApplyTransform(ImageDesc& img,
                            const ASCColorCorrection& cc,
                            TransformDirection direction);
        
        
        
        
        
        
        
        
        
        */
        
        
        
        // PER-SHOT CCs ///////////////////////////////////////////////////////
        
        // TODO: This only applies the raw correction. How do we appropriately
        // wrap this to be colorspace aware? It probably should be...
        // If we defined roles for required lookColorSpace, and the name of
        // the colorspace after application, could we simplify the whole
        // look pipeline?
        // or is the current system more general.
        /*
        //! Not needed by clients except those that publish looks.
        const char * GetNullResolvedShotCCLocation();
        
        void InitializeShotCC(ShotCC* shotCC,
                              const char * visualization, const char * shot);
        
        void ApplyTransform(ImageDesc& img,
                            const ShotCC &shotCC);
        
        
        */
        
        
        // UTILITIES //////////////////////////////////////////////////////////
        
        /*
        //! Return a list of all external file references
        int GetNumFileReferences();
        const char * GetFileReference(int index);
        
        //! What are the luminance coefficients the the reference colorspace
        // (For example, r=0.32, g=0.64, b=0.04). These always sum to 1.0
        void QueryLuminanceCoefficients(float* r, float* g, float* b);
        
        void GenerateIdentity3DLattice(float* img, unsigned int linearLutSize);
        
        */
        
        // TODO: Make a coordinatespace transform.
        
        //! Every color library, by law, is required to define these.
        //  Ours is no exception
        //
        // rgb <-> hsv
        //     rgb, s, v are unconstrained, h [0,1]
        //
        // rgb <-> hsl
        //     rgb, s, l are unconstrained, h [0,1]
        //
        // rgb <-> tml
        // Color temp (red vs. blue), magenta, and luma
        // Note that the luminance coefficient are
        // fixed, and do not obey the show config settings
        
        /*
        void ApplyTransform(ImageDesc& img,
                            CoordinateSpace srcCoordinateSpace,
                            CoordinateSpace dstCoordinateSpace);
        */
        
    #endif
    
    
    
    
    
    #if 0
    
    ///////////////////////////////////////////////////////////////////////////
    ///
    /// COLOR CORRECTION -- ASC_CDL (v1.2)
    ///
    /// SCALE -> OFFSET -> POWER -> SAT
    //
    /// Note that, by spec, if 'power' is set to non-1.0, the application
    /// of a cdl program will clamp the output image
    /// If only slope / offset / saturation are used,
    /// the result is non-clamping.
    
    /*
    class ASCColorCorrectionImpl;
    
    class ASCColorCorrection
    {
    public:
        
        ASCColorCorrection();
        ~ASCColorCorrection();
        
        ASCColorCorrection(const ASCColorCorrection &);
        ASCColorCorrection& operator= (const ASCColorCorrection &);
        
        ///////////////////////////////////////////////////////////////////////
        
        //! Set whether the cc is muted, or not. Default is false
        void setMuted(bool muted);
        
        //! Query whether the cc is muted. Note that even when this cc is muted,
        //! the calls to get {Slope,Offset,Power,Sat} will still return non-null
        //! values if previously set.
        bool isMuted() const;
        
        //! Query whether this cc is a NoOp. (for color processing purposes).
        //! Note that a muted color correction is always a NoOp
        bool isNoOp() const;
        
        //! Is this cc equal to the other cc?
        // (TODO: does this only effect color math? how about ID?)
        bool isEqualTo(const ASCColorCorrection & other) const;
        
        ///////////////////////////////////////////////////////////////////////
        
        // ASC_SOP
        // Slope, offset, power
        // out = clamp( (in * slope) + offset ) ^ power
        //
        // The ASC interface only defines 3 numbers
        // However, for convenience you can set and set as 4
        // (but if you serialize to xml and reload, you'll
        //  only have 3 populated)
        
        // Three number interface (native)
        void setSlope(float r, float g, float b);
        void getSlope(float *r, float *g, float *b) const;
        
        void setOffset(float r, float g, float b);
        void getOffset(float *r, float *g, float *b) const;
        
        void setPower(float r, float g, float b);
        void getPower(float *r, float *g, float *b) const;
        
        // Inverse of power. bigger number is brighter
        void setGamma(float r, float g, float b);
        void getGamma(float *r, float *g, float *b) const;
        
        // Four number interface (convenient)
        void setSlope(float rgb, float r, float g, float b);
        void getSlope(float* rgb, float *r, float *g, float *b) const;
        
        void setOffset(float rgb, float r, float g, float b);
        void getOffset(float* rgb, float *r, float *g, float *b) const;
        
        void setPower(float rgb, float r, float g, float b);
        void getPower(float* rgb, float *r, float *g, float *b) const;
        
        // Inverse of power. bigger number is brighter
        void setGamma(float rgb, float r, float g, float b);
        void getGamma(float* rgb, float *r, float *g, float *b) const;
        
        // ASC_SAT
        void setSaturation(float sat);
        float getSaturation() const;
        
        // These are hard-coded, by spec, to r709
        void getSaturationLumaCoefficients(float* r, float* g, float* b) const;
        
        
        ///////////////////////////////////////////////////////////////////////
        
        // Metadata
        
        // Unique Identifier for this correction
        void setID(const char * id);
        const char * getID() const;
        
        // Textual description of color correction
        // (stored on the SOP)
        void setDescription(const char * description);
        const char * getDescription() const;
        
        ///////////////////////////////////////////////////////////////////////
        
        
        //
        // Serialization
        //
        
        //
        // See /net/homedirs/jeremys/svn/cdl/ASC-CDL_dist_v1.2/
        // asc-cdl_test_images/Sat/sat_test_corrections.ccc
        // asc-cdl_test_images/SOP/sop_test_corrections.ccc
        // for examples.
        
        //! Load from the specified xml string. Must be type "ColorCorrection"
        void readFromXML(const char * xml);
        
        // Warning:
        // The format this writes out is a bit wanky.
        // 
        // The strict ASC cc will only contain 3 channels / correction.
        // So we, collapse the transform into 3 channels and write this out as
        // expected for compatibility reasons. But, we then decorate additional
        // info on the XML (as is the intent of XML)
        // Thus, even though you may set 4 components of color data
        // (rgb, r, g, b) if you serialize the cc and read back in, only 3
        // components will be filled. (Of course, the image results will be
        // identical) SPI preserves 4 component cc, as well as mute state
        
        const char * getXML(int indent, bool decorateWithMetadata);
    
    private:
        friend class ASCColorCorrectionImpl;
        std::auto_ptr<ASCColorCorrectionImpl> m_impl;
    };
    
    std::ostream& operator<< (std::ostream&, const ASCColorCorrection&);
    */
    
    
    
    
    /////////////////////////////////////////////////////////
    //
    // Display Transform
    //
    //
    /*
    class DisplayTransformImpl;
    
    // TODO: Rename display transform so it doesnt have
    // transform in the name, or that it is derives from
    // a transform class
    
    class DisplayTransform
    {
    public:
        
        DisplayTransform();
        ~DisplayTransform();
        DisplayTransform(const DisplayTransform & rhs);
        
        ////////////////////
        
        void setViewMatrix(const float* m20);
        void getViewMatrix(float* m20) const;
        
        void setInputColorSpace(const ColorSpace& colorspace);
        const ColorSpace& getInputColorSpace() const;
        
        void setFStopExposure(const float* v4);
        void getFStopExposure(float* v4) const;
        
        void setColorCorrection(const ASCColorCorrection& cc);
        const ASCColorCorrection& getColorCorrection() const;
        
        void setShotCC(const ShotCC& shotCC);
        const ShotCC& void getShotCC() const;
        
        void setDisplayDevice(const char * displayDevice);
        const char * getDisplayDevice() const;
        
        void setVisualization(const char * visualization);
        const char * getVisualization() const;
        
        
        // Data Visualization
        void setDataMin(const float* v4);
        void getDataMin(float* v4) const;
        
        void setDataMax(const float* v4);
        void getDataMax(float* v4) const;
        
        
        
        // 'Post-LUT' view conveniences
        void setViewGamma(float val);
        float getViewGamma() const;
        
        void setViewWhitePoint(float val);
        float getViewWhitePoint() const;
        
        void setViewBlackPoint(float val);
        float getViewBlackPoint() const;
        
        void setViewAdjustmentsMuted(bool muted);
        bool getViewAdjustmentsMuted() const;
        
        ////////////////////
        
        const char * toString() const;
        const char * getCacheID() const;
    
    private:
        friend class DisplayTransformImpl;
        std::auto_ptr<DisplayTransformImpl> m_impl;
    };
    
    std::ostream& operator<< (std::ostream&, const DisplayTransform&);
    */
    
    
    /////////////////////////////////////////////////////////
    //
    // ShotCC
    //
    // These can be either an ASC Color transform
    //          or any other supported operation
    //          (lut1d, lut3d, mtx, etc)
    //
    // This has support for shot-varying looks, such
    // as cc numbers, DI numbers, etc.
    /*
    class DisplayTransform;
    class ShotCCImpl;
    
    class ShotCC
    {
    public:
        ShotCC();
        ~ShotCC();
        
        ShotCC(const ShotCC &);
        ShotCC& operator= (const ShotCC &);
        
        bool isInitialized() const;
        
        const char * getUnresolvedLocation() const;
        
        void setResolvedLocation(const char * location);
        const char * getResolvedLocation() const;
        
        bool isNoOp() const;
        const char * toString() const;
        
        const ShotCCImpl* getImpl() const;
    
    private:
        friend class ShotCCImpl;
        std::auto_ptr<ShotCCImpl> m_impl;
    };
    
    std::ostream& operator<< (std::ostream&, const ShotCC&);
    */
    #endif
    
    
    
    
    
    
