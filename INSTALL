----------------------------------------------------------------------------------------------------------------------
Nuke On Linux, using a 'local' ocio installation.
(Substitute your Nuke installation location for NDK_PATH, and your python2.5 installation).
Python2.5 must be specified if you want to use the python bindings

> cd <YOUR_OCIO_DIR>
> mkdir -p build && cd build
> mkdir -p install

> env NDK_PATH=/net/apps/spinux1/foundry/nuke6.1v2/ cmake -D CMAKE_BUILD_TYPE=RelWithDebInfo -D CMAKE_INSTALL_PREFIX=install -D OCIO_NAMESPACE=OpenColorIO_Nuke -D PYTHON=/usr/bin/python2.5 ../

> make -j8 && make install

Set the ocio profile to use:
> setenv OCIO /net/homedirs/jeremys/git/OpenColorIO/configs/spivfx/config.ocio

Launch Nuke:
> setenv OCIO <PATH_TO_OCIO_PROFILE>/config.ocio
> setenv OCIO_ROOT=${PWD}/install
> setenv LD_LIBRARY_PATH=${OCIO_ROOT}/lib:${LD_LIBRARY_PATH}
> setenv NUKE_PATH=${OCIO_ROOT}/lib/nuke6.1v2:${OCIO_ROOT}/share/nuke:${NUKE_PATH}
> nuke

Launch nuke, then load the plugin (either interactively, or in init.py and menu.py respectively for the two commands):

Connect an image to the OCIOColorSpace node to test.

----------------------------------------------------------------------------------------------------------------------
OpenColorIO is set up for CMake ( http://www.cmake.org/cmake/help/cmake-2-8-docs.html ). On Unix, building should look like this:

$ mkdir build && cd build
build $ cmake ../
build $ make
and then one might do
build $ ./OpenColorIOTest

Configuration/build options are available.
For a console UI to view and set available options, use
build $ ccmake ../
or for interactive text prompts,
build $ cmake -i ../
or to specify them on the command line,
build $ cmake -D NUKE:FILEPATH=/usr/local/nuke6.0.3/include/ -D PYTHON:FILEPATH=/usr/local64/bin/python2.6 ..
All together,
mkdir build && cd build && cmake ../ && make OpenColorIOTest && ./OpenColorIOTest
