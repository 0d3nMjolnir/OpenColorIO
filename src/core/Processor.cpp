/*
Copyright (c) 2003-2010 Sony Pictures Imageworks Inc., et al.
All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of Sony Pictures Imageworks nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <OpenColorSpace/OpenColorSpace.h>

#include "Processor.h"
#include "ScanlineHelper.h"

#include <sstream>

OCS_NAMESPACE_ENTER
{
    Processor::~Processor()
    { }
    
    
    //////////////////////////////////////////////////////////////////////////
    
    ConstProcessorRcPtr LocalProcessor::Create(const OpRcPtrVec& opVec)
    {
        return ConstProcessorRcPtr(new LocalProcessor(opVec), &deleter);
    }
    
    void LocalProcessor::deleter(LocalProcessor* p)
    {
        delete p;
    }
    
    LocalProcessor::LocalProcessor(const OpRcPtrVec& opVec):
        m_opVec(opVec)
    { }
    
    LocalProcessor::~LocalProcessor()
    { }
    
    bool LocalProcessor::isNoOp() const
    {
        return m_opVec.empty();
    }
    
    void LocalProcessor::apply(ImageDesc& img) const
    {
        if(m_opVec.empty()) return;
        
        ScanlineHelper scanlineHelper(img);
        float * rgbaBuffer = 0;
        long numPixels = 0;
        
        while(true)
        {
            scanlineHelper.prepRGBAScanline(&rgbaBuffer, &numPixels);
            if(numPixels == 0) break;
            if(!rgbaBuffer)
                throw OCSException("Cannot apply transform; null image.");
            
            for(OpRcPtrVec::size_type i=0, size = m_opVec.size(); i<size; ++i)
            {
                m_opVec[i]->apply(rgbaBuffer, numPixels);
            }
            
            scanlineHelper.finishRGBAScanline();
        }
    }
    
    void LocalProcessor::applyRGB(float * pixel) const
    {
        if(m_opVec.empty()) return;
        
        // We need to allocate a temp array as the pixel must be 4 floats in size
        // (otherwise, sse loads will potentially fail)
        
        float rgbaBuffer[4] = { pixel[0], pixel[1], pixel[2], 0.0f };
        
        for(OpRcPtrVec::size_type i=0, size = m_opVec.size(); i<size; ++i)
        {
            m_opVec[i]->apply(rgbaBuffer, 1);
        }
        
        pixel[0] = rgbaBuffer[0];
        pixel[1] = rgbaBuffer[1];
        pixel[2] = rgbaBuffer[2];
    }
    
    void LocalProcessor::applyRGBA(float * pixel) const
    {
        for(OpRcPtrVec::size_type i=0, size = m_opVec.size(); i<size; ++i)
        {
            m_opVec[i]->apply(pixel, 1);
        }
    }
    
    
    
    
    
    
    
    
    ///////////////////////////////////////////////////////////////////////////
    
    namespace
    {
        void WriteShaderHeader(std::ostringstream* shader, const std::string & pixelName,
                               const GpuShaderDesc & shaderDesc)
        {
            if(!shader) return;
            
            *shader << "\n// Generated by OpenColorSpace" << "\n";
            *shader << "\n";
            
            GpuLanguage lang = shaderDesc.getLanguage();
            
            std::string fcnName = shaderDesc.getFunctionName();
            
            if(lang == GPU_LANGUAGE_CG)
            {
                *shader << "half4 " << fcnName << "(in half4 inPixel," << "\n";
            }
            else if(lang == GPU_LANGUAGE_GLSL)
            {
                *shader << "vec4 " << fcnName << "(in vec4 inPixel," << "\n";
            }
            else throw OCSException("Unspecified shader language.");
            
            *shader << "    const uniform sampler3D lut3d)" << "\n";
            *shader << "{" << "\n";
            
            if(lang == GPU_LANGUAGE_CG)
            {
                *shader << "    half4 " << pixelName << " = inPixel;" << "\n";
            }
            else if(lang == GPU_LANGUAGE_GLSL)
            {
                *shader << "    vec4 " << pixelName << " = inPixel;" << "\n";
            }
            else throw OCSException("Unspecified shader language.");
        }
        
        
        void WriteShaderFooter(std::ostringstream* shader,
                               const std::string & pixelName,
                               const GpuShaderDesc & /*shaderDesc*/)
        {
            *shader << "    return " << pixelName << ";\n";
            *shader << "}" << "\n";
            *shader << "\n";
        }
        
        // Find the minimal index range in the opVec that does not support
        // shader text generation.  The endIndex is not inclusive.
        // 
        // I.e., if the entire opVec does not support GPUShaders, the
        // result will be startIndex = 0, endIndex = opVec.size()
        // 
        // If the entire opVec supports GPU generation, both the
        // startIndex and endIndex will equal -1
        
        void GetGPUUnsupportedIndexRange(int * startIndex, int * endIndex,
                                         const OpRcPtrVec & opVec)
        {
            int start = -1;
            int end = -1;
            
            for(unsigned int i=0; i<opVec.size(); ++i)
            {
                // We've found a gpu unsupported op.
                // If it's the first, save it as our start.
                // Otherwise, update the end.
                
                if(!opVec[i]->supportsGPUShader())
                {
                    if(start<0) start = i;
                    else end = i;
                }
            }
            
            if(startIndex) *startIndex = start;
            if(endIndex) *endIndex = end;
        }
    }
    
    
    
    void LocalProcessor::getGPUShader(std::ostringstream * shader,
                                      std::ostringstream * lut3dCacheID, float * lut3d,
                                      const GpuShaderDesc & shaderDesc) const
    {
        std::string pixelName = "out_pixel";
        
        WriteShaderHeader(shader, pixelName, shaderDesc);
        
        
        // Get the interior index range does not support the gpu shader.
        // This is used to bound our analytical shader text generation
        
        int writeToLut3DStartIndex = 0;
        int writeToLut3DEndIndex = 0;
        
        GetGPUUnsupportedIndexRange(&writeToLut3DStartIndex,
                                    &writeToLut3DEndIndex,
                                    m_opVec);
        
        // Can we write the entire shader using only shader text
        // If so, do it here.
        if(writeToLut3DStartIndex == -1 && writeToLut3DEndIndex == -1)
        {
            // TODO: Blank out lut3d and lut3d cacheID
            
            for(unsigned int i=0; i<m_opVec.size(); ++i)
            {
                // TODO: provide prefix for local variable names?
                // m_opVec[i]->getGPUShader(shader, lut3dCacheID, lut3d, shaderDesc);
            }
        }
        else
        {
            // Allocate rgba 3dlut image
            int lut3DEdgeLen = shaderDesc.getLut3DEdgeLen();
            int lut3DNumPixels = lut3DEdgeLen*lut3DEdgeLen*lut3DEdgeLen;
            
            // TODO: Warn on max size?
            float lut3DRGBABuffer[lut3DNumPixels*4];
            // TODO: fill rgba buffer with lut3D indentity lut
            
            for(int i=0; i<(int)m_opVec.size(); ++i)
            {
                // We're at the start of the 3D block,
                // transfer the image to the lut3D
                if(i == writeToLut3DStartIndex)
                {
                
                }
                
                // Apply the op in the appropriate manner
                if(i>=writeToLut3DStartIndex && i < writeToLut3DEndIndex)
                {
                     m_opVec[i]->apply(lut3DRGBABuffer, lut3DNumPixels);
                }
                else
                {
                    // m_opVec[i]->getGPUShader(shader, lut3dCacheID, lut3d, shaderDesc);
                }
                
                // We're at the end of the 3D block,
                // sample the lut3D and return to shader text generation
                if(i == writeToLut3DEndIndex-1)
                {
                    // GetLut3DShaderCore
                }
            }
            
            // TODO: Copy the lut3d image to the lut3d
        }
        
        WriteShaderFooter(shader, pixelName, shaderDesc);
    }
    
    const char * LocalProcessor::getGPUShaderText(const GpuShaderDesc & shaderDesc) const
    {
        std::ostringstream shader;
        getGPUShader(&shader, 0, 0, shaderDesc);
        
        // TODO: This is not multi-thread safe. Cache result? or mutex?
        m_shaderText = shader.str();
        return m_shaderText.c_str();
    }
    
    /*
    int LocalProcessor::getGPULut3DEdgeLen() const
    {
        return 0;
    }
    
    const char * LocalProcessor::getGPULut3DCacheID(const GpuProfileDesc & gpuDesc) const
    {
        return "";
    }
    
    void LocalProcessor::getGPULut3D(float* lut3d, const GpuProfileDesc & gpuDesc) const
    {
        
    }
    */
}
OCS_NAMESPACE_EXIT
