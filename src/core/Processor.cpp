/*
Copyright (c) 2003-2010 Sony Pictures Imageworks Inc., et al.
All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of Sony Pictures Imageworks nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <OpenColorIO/OpenColorIO.h>

#include "GpuShaderUtils.h"
#include "Lut3DOp.h"
#include "Processor.h"
#include "ScanlineHelper.h"

#include <cstring>
#include <sstream>

#include <iostream>

OCIO_NAMESPACE_ENTER
{
    Processor::~Processor()
    { }
    
    
    //////////////////////////////////////////////////////////////////////////
    
    LocalProcessorRcPtr LocalProcessor::Create()
    {
        return LocalProcessorRcPtr(new LocalProcessor(), &deleter);
    }
    
    void LocalProcessor::deleter(LocalProcessor* p)
    {
        delete p;
    }
    
    LocalProcessor::LocalProcessor()
    { }
    
    LocalProcessor::~LocalProcessor()
    { }
    
    void LocalProcessor::registerOp(OpRcPtr op)
    {
        m_opVec.push_back(op);
    }
    
    void LocalProcessor::annotateColorSpace(const ConstColorSpaceRcPtr & cs)
    {
        // TODO
    }
    
    void LocalProcessor::finalizeOps()
    {
        // TODO: Perform smart optimizations / collapsing on the OpVec
        
        // After construction, finalize the setup
        for(unsigned int i=0; i<m_opVec.size(); ++i)
        {
            m_opVec[i]->setup();
        }
        
        std::cerr << "Finalizing " << m_opVec.size() << " ops" << std::endl;
    }
    
    
    bool LocalProcessor::isNoOp() const
    {
        return m_opVec.empty();
    }
    
    void LocalProcessor::apply(ImageDesc& img) const
    {
        if(m_opVec.empty()) return;
        
        ScanlineHelper scanlineHelper(img);
        float * rgbaBuffer = 0;
        long numPixels = 0;
        
        while(true)
        {
            scanlineHelper.prepRGBAScanline(&rgbaBuffer, &numPixels);
            if(numPixels == 0) break;
            if(!rgbaBuffer)
                throw Exception("Cannot apply transform; null image.");
            
            for(OpRcPtrVec::size_type i=0, size = m_opVec.size(); i<size; ++i)
            {
                m_opVec[i]->apply(rgbaBuffer, numPixels);
            }
            
            scanlineHelper.finishRGBAScanline();
        }
    }
    
    void LocalProcessor::applyRGB(float * pixel) const
    {
        if(m_opVec.empty()) return;
        
        // We need to allocate a temp array as the pixel must be 4 floats in size
        // (otherwise, sse loads will potentially fail)
        
        float rgbaBuffer[4] = { pixel[0], pixel[1], pixel[2], 0.0f };
        
        for(OpRcPtrVec::size_type i=0, size = m_opVec.size(); i<size; ++i)
        {
            m_opVec[i]->apply(rgbaBuffer, 1);
        }
        
        pixel[0] = rgbaBuffer[0];
        pixel[1] = rgbaBuffer[1];
        pixel[2] = rgbaBuffer[2];
    }
    
    void LocalProcessor::applyRGBA(float * pixel) const
    {
        for(OpRcPtrVec::size_type i=0, size = m_opVec.size(); i<size; ++i)
        {
            m_opVec[i]->apply(pixel, 1);
        }
    }
    
    
    
    
    
    
    
    
    ///////////////////////////////////////////////////////////////////////////
    
    namespace
    {
        void WriteShaderHeader(std::ostringstream* shader, const std::string & pixelName,
                               const GpuShaderDesc & shaderDesc)
        {
            if(!shader) return;
            
            std::string lut3dName = "lut3d";
            
            *shader << "\n// Generated by OpenColorIO" << "\n";
            *shader << "\n";
            
            GpuLanguage lang = shaderDesc.getLanguage();
            
            std::string fcnName = shaderDesc.getFunctionName();
            
            if(lang == GPU_LANGUAGE_CG)
            {
                *shader << "half4 " << fcnName << "(in half4 inPixel," << "\n";
            }
            else if(lang == GPU_LANGUAGE_GLSL_1_0 || lang == GPU_LANGUAGE_GLSL_1_3)
            {
                *shader << "vec4 " << fcnName << "(in vec4 inPixel, \n";
            }
            else throw Exception("Unspecified shader language.");
            
            *shader << "    const uniform sampler3D " << lut3dName << ") \n";
            *shader << "{" << "\n";
            
            if(lang == GPU_LANGUAGE_CG)
            {
                *shader << "    half4 " << pixelName << " = inPixel; \n";
            }
            else if(lang == GPU_LANGUAGE_GLSL_1_0 || lang == GPU_LANGUAGE_GLSL_1_3)
            {
                *shader << "    vec4 " << pixelName << " = inPixel; \n";
            }
            else throw Exception("Unspecified shader language.");
        }
        
        
        void WriteShaderFooter(std::ostringstream* shader,
                               const std::string & pixelName,
                               const GpuShaderDesc & /*shaderDesc*/)
        {
            *shader << "    return " << pixelName << ";\n";
            *shader << "}" << "\n";
            *shader << "\n";
        }
        
        // Find the minimal index range in the opVec that does not support
        // shader text generation.  The endIndex *is* inclusive.
        // 
        // I.e., if the entire opVec does not support GPUShaders, the
        // result will be startIndex = 0, endIndex = opVec.size() - 1
        // 
        // If the entire opVec supports GPU generation, both the
        // startIndex and endIndex will equal -1
        
        void GetGPUUnsupportedIndexRange(int * startIndex, int * endIndex,
                                         const OpRcPtrVec & opVec)
        {
            int start = -1;
            int end = -1;
            
            for(unsigned int i=0; i<opVec.size(); ++i)
            {
                // We've found a gpu unsupported op.
                // If it's the first, save it as our start.
                // Otherwise, update the end.
                
                if(!opVec[i]->supportsGPUShader())
                {
                    if(start<0)
                    {
                        start = i;
                        end = i;
                    }
                    else end = i;
                }
            }
            
            if(startIndex) *startIndex = start;
            if(endIndex) *endIndex = end;
        }
    }
    
    
    void LocalProcessor::getGPUShader(std::ostringstream * shader,
                                      std::ostringstream * lut3dCacheID, float * lut3d,
                                      const GpuShaderDesc & shaderDesc) const
    {
        std::string pixelName = "out_pixel";
        std::string lut3dName = "lut3d";
        
        WriteShaderHeader(shader, pixelName, shaderDesc);
        
        // Get the interior index range does not support the gpu shader.
        // This is used to bound our analytical shader text generation
        
        int lut3DOpStartIndex = 0;
        int lut3DOpEndIndex = 0;
        
        GetGPUUnsupportedIndexRange(&lut3DOpStartIndex,
                                    &lut3DOpEndIndex,
                                    m_opVec);
        
        /*
        std::cerr << "lut3DOpStartIndex " << lut3DOpStartIndex << std::endl;
        std::cerr << "lut3DOpEndIndex " << lut3DOpEndIndex << std::endl;
        */
        
        int lut3DEdgeLen = shaderDesc.getLut3DEdgeLen();
        int lut3DNumPixels = lut3DEdgeLen*lut3DEdgeLen*lut3DEdgeLen;
        
        // Can we write the entire shader using only shader text
        // If so, do it here.
        if(lut3DOpStartIndex == -1 && lut3DOpEndIndex == -1)
        {
            // Lut3D is not needed. Blank it.
            if(lut3d) memset(lut3d, 0, sizeof(float) * 3 * lut3DNumPixels);
            if(lut3dCacheID) *lut3dCacheID << "<NULL>";
            
            for(unsigned int i=0; i<m_opVec.size(); ++i)
            {
               throw Exception("TODO: getGPUShader");
               
                // m_opVec[i]->getGPUShader(shader, lut3dCacheID, lut3d, shaderDesc);
            }
        }
        else
        {
            // Allocate rgba 3dlut image
            float lut3DRGBABuffer[lut3DNumPixels*4];
            GenerateIdentityLut3D(lut3DRGBABuffer, lut3DEdgeLen, 4);
            
            for(int i=0; i<(int)m_opVec.size(); ++i)
            {
                // We're at the start of the 3D block,
                // transfer the image to the lut3D
                if(i == lut3DOpStartIndex)
                {
                    std::cerr << "Transfer to lut3d with better allocation." << std::endl;
                }
                
                // Apply the op in the appropriate manner
                if(i >= lut3DOpStartIndex && i <= lut3DOpEndIndex)
                {
                    if(lut3d)
                    {
                        m_opVec[i]->apply(lut3DRGBABuffer, lut3DNumPixels);
                    }
                    if(lut3dCacheID)
                    {
                        std::cerr << " TODO: update cacheID with opCacheID" << std::endl;
                    }
                }
                else
                {
                    throw Exception("TODO: getGPUShader");
                    // m_opVec[i]->getGPUShader(shader, lut3dCacheID, lut3d, shaderDesc);
                }
                
                // We're at the end of the 3D block,
                // sample the lut3D and return to shader text generation
                if(i == lut3DOpEndIndex)
                {
                    if(shader)
                    {
                        *shader << "    " << pixelName << ".rgb = ";
                        Write_sampleLut3D_rgb(shader, pixelName,
                                              lut3dName, lut3DEdgeLen,
                                              shaderDesc.getLanguage());
                    }
                }
            }
            
            // Copy the lut3d rgba image to the lut3d
            
            if(lut3d)
            {
                for(int i=0; i<lut3DNumPixels; ++i)
                {
                    lut3d[3*i+0] = lut3DRGBABuffer[4*i+0];
                    lut3d[3*i+1] = lut3DRGBABuffer[4*i+1];
                    lut3d[3*i+2] = lut3DRGBABuffer[4*i+2];
                }
            }
        }
        
        WriteShaderFooter(shader, pixelName, shaderDesc);
    }
    
    const char * LocalProcessor::getGPUShaderText(const GpuShaderDesc & shaderDesc) const
    {
        std::ostringstream shader;
        getGPUShader(&shader, 0, 0, shaderDesc);
        
        // TODO: This is not multi-thread safe. Cache result or mutex
        m_shaderText = shader.str();
        return m_shaderText.c_str();
    }
    
    void LocalProcessor::getGPULut3D(float* lut3d, const GpuShaderDesc & shaderDesc) const
    {
        if(!lut3d) return;
        getGPUShader(0, 0, lut3d, shaderDesc);
    }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    // TODO: What is the right place for this?
    // TODO: switch to non-refcounted version?
    
    void BuildColorSpaceConversionOps(LocalProcessor & processor,
                                      const Config & config,
                                      const ConstColorSpaceRcPtr & srcColorSpace,
                                      const ConstColorSpaceRcPtr & dstColorSpace)
    {
        if(srcColorSpace->getFamily() == dstColorSpace->getFamily())
        {
            return;
        }
        
        if(srcColorSpace->isData() || dstColorSpace->isData())
        {
            return;
        }
        
        // Consider dt8 -> vd8?
        // One would have to explode the srcColorSpace->getTransform(COLORSPACE_DIR_TO_REFERENCE);
        // result, and walk through it step by step.  If the dstColorspace family were
        // ever encountered in transit, we'd want to short circuit the result.
        
        processor.annotateColorSpace(srcColorSpace);
        
        ConstGroupTransformRcPtr toref = srcColorSpace->getTransform(COLORSPACE_DIR_TO_REFERENCE);
        BuildOps(processor, config, toref, TRANSFORM_DIR_FORWARD);
        
        // processor.annotateColorSpace(reference);
        
        ConstGroupTransformRcPtr fromref = dstColorSpace->getTransform(COLORSPACE_DIR_FROM_REFERENCE);
        BuildOps(processor, config, fromref, TRANSFORM_DIR_FORWARD);
        
        processor.annotateColorSpace(dstColorSpace);
    }
}
OCIO_NAMESPACE_EXIT
